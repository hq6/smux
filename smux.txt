Help on module smux:

NAME
    smux - smux.py <session_spec_file>

DESCRIPTION
    The format of session_spec_file consists of ini-style parameters followed by
    lists of commands delimited by lines beginning with '---'.
    
    Currently there are four supported parameters.
    
    PANES_PER_WINDOW,
        The number of panes that each window will be carved into.
    
    LAYOUT,
        One of the five standard tmux layouts, given below.
        even-horizontal, even-vertical, main-horizontal, main-vertical, tiled.
    
    NO_CREATE,
        When given (no parameter value), smux will attempt to send the commands
        to the caller's window. Option is ignored if more than one command
        sequence if given, or caller is not inside a tmux session.
    
    USE_THREADS,
        When given (no parameter value), smux will use a different thread for
        sending commands to each pane. It will not exit until all the threads
        are joined. This parameter is ignored when NO_CREATE is given, or when
        there is only one list of commands.
    
    There are three types of commands that can appear in an smux file.
    1. Ordinary commands are sent to the target pane without modification as if a
       user had typed them by hand.
    2. Comments are lines that begin with `#` and are ignored.
    3. #smux directives, which are lines beginning with `#smux ` and invoke special
       functionality inside the smux itself. The currently supported #smux
       directive are described in the following section.
    
    #smux directives
    ----------------
    paste-buffer [args]
      Identical to tmux paste-buffer, except with the pane already specified.
    send-keys [args]
      Identical to tmux send-keys, except with the pane already specified.
      This is useful for sending special keys such as `Enter`, since smux's
      normal mode of operation is to send all keys literally.
    waitForString <string> [pollingInterval] [numLinesToExamine]
      Wait until the given string appears in the last line of the target pane
      before executing or sending the next command. Note that this directive
      polls on the output of `tmux capture-pane`, so it only works reliably if
      the string it is waiting for appears on the screen and stays on the
      screen persistently until user input is received. That means it is
      appropriate for waiting for shell or password prompts, but not waiting
      for a particular line to appear in a streaming log. The polling interval
      (default 1 second) and the number of lines examined can be overriden by
      passing additional arguments.
    waitForRegex <regex> [pollingInterval] [numLinesToExamine]
      Identical to waitForString except that the first argument is treated as a
      Python regular expression rather than a literal string.
    shell <args>
      Execute a shell command using `/bin/sh`. The variables $window and $pane
      are exported for use by the command. Output is not captured by smux.
      Each instance of this directive runs in a separate shell.
    sleep <seconds>
      Sleep for a given number of seconds before executing or sending the next
      command.
    
    
    Sample Input File:
    
        # This is a comment
        PANES_PER_WINDOW = 4
        LAYOUT = tiled
        ----------
        echo 'This is pane 1'
        cat /proc/cpuinfo | less
        ----------
        echo 'This is pane 2'
        cat /proc/meminfo
        ----------
        echo 'This is pane 3'
        uname -a
        ----------
        echo "This is pane 4"
        cat /etc/issue
        ----------

FUNCTIONS
    create(numPanesPerWindow, commands, layout='tiled', executeAfterCreate=None, noCreate=False, useThreads=False)
        Create a set of tmux panes and run each command list in commands in its own pane.
        
        Parameters
        ----------
        numPanesPerWindow: int
          The number of panes to create in each window. If there are more lists of
          commands than numPanesPerWindow, more windows will be created.
        commands : list(list(str))
          A list of command lists. Each command list will be send to a given pane.
          The types of commands are documented in smux.__doc__.
        executeAfterCreate : Callable[[], None]
          A function that a client can pass in to be executed after creating the
          windows. For example, one can synchronize the panes by passing the following:
          lambda : smux.tcmd("setw synchronize-panes on")
        noCreate : bool
          True means smux should send the commands to the pane that the caller lives
          in, rather than creating new panes. Ignored if more than one command list
          is given, or caller is not currently running in a tmux session.
          This can be useful for using smux to ssh into a machine and then run
          commands inside the ssh session.
        useThreads: bool
          True means that smux will handle the commands for each pane using different
          threads, so that if a command includes a slow pragma such as #smux sleep,
          it will not slow down the execution of commands in other panes.
          This should be to False unless the caller is certain that the commands in
          different panes are independent of each other's timing.

